---
import type { CollectionEntry } from 'astro:content';
import { getCollection, getEntry } from 'astro:content';
import type { DetailsListItem } from '../components/DetailsList.astro';
import DetailsList from '../components/DetailsList.astro';
import PageHeader from '../components/PageHeader.astro';
import { siteDescription, siteTitle } from '../consts';
import Layout from '../layouts/Layout.astro';
import { getBlogDescription } from '../lib/get-blog-description';
import { renderDateToHtml } from '../lib/render-date-to-html';
import { renderYearMonthRangeToHtml } from '../lib/render-year-month-range-to-html';

function toPrimaryItem(entry: CollectionEntry<'blog' | 'external-post'>): DetailsListItem {
  switch (entry.collection) {
    case 'blog':
      return {
        title: entry.data.title,
        link: `/${entry.slug}`,
        meta: siteTitle,
      };

    case 'external-post':
      return {
        title: entry.data.title,
        link: entry.data.link,
        meta: entry.data.channel,
      };

    default:
      throw new TypeError(entry satisfies never);
  }
}

const primaryItems = [
  toPrimaryItem(await getEntry('external-post', '2023-07-24-gihyojp-tailwindcss')),
  toPrimaryItem(await getEntry('blog', '2023-02-06-tailwind-css-in-wdpress')),
  toPrimaryItem(await getEntry('blog', '2022-11-03-how-to-understand-the-markup')),
  toPrimaryItem(await getEntry('blog', '2022-08-01-declarative-design')),
  toPrimaryItem(await getEntry('blog', '2022-06-11-css-components')),
  toPrimaryItem(await getEntry('external-post', '2022-05-27-body-typography')),
  toPrimaryItem(await getEntry('external-post', '2021-12-27-shiftbrain-everylayout')),
  toPrimaryItem(await getEntry('external-post', '2021-12-16-codegrid-everylayout')),
  toPrimaryItem(await getEntry('blog', '20211011-publication-of-everylayout')),
  toPrimaryItem(await getEntry('blog', '20210127-prefer-margin-top')),
  toPrimaryItem(await getEntry('external-post', '2020-07-09-codegrid-tailwindcss')),
  {
    title:
      'CSSのユーティリティクラスと「関心の分離」&mdash;&mdash;いかにしてユーティリティファーストにたどり着いたか（翻訳）',
    link: 'https://yuheiy.hatenablog.com/entry/2020/05/25/021342',
    meta: 'yuhei blog',
  },
  toPrimaryItem(await getEntry('external-post', '2019-03-08-html-for-creators')),
  toPrimaryItem(
    await getEntry('external-post', '2018-10-26-shiftbrain-in-page-links-and-click-event'),
  ),
] satisfies DetailsListItem[];

const projectItems = [
  {
    title: 'postcss-fluid-sizing-function',
    link: 'https://github.com/yuheiy/postcss-fluid-sizing-function',
    meta: renderYearMonthRangeToHtml({ year: 2024, month: 2 }),
    description:
      'CSSのブレイクポイントとサイズを引数に指定するとclamp()に変換できるPostCSSプラグイン。',
  },
  {
    title: 'sdenv',
    link: 'https://github.com/yuheiy/sdenv',
    meta: renderYearMonthRangeToHtml({ year: 2023, month: 7 }),
    description:
      'ウェブサイト（not ウェブアプリケーション）のためのフロントエンド開発スターターキット。',
  },
  {
    title: 'drygen',
    link: 'https://github.com/yuheiy/drygen',
    meta: renderYearMonthRangeToHtml({ year: 2020, month: 12 }),
    description: '指定したファイルに基づいて別のファイルを生成できるコードジェネレータ。',
  },
  {
    title: 'wordpress-starter',
    link: 'https://github.com/yuheiy/wordpress-starter',
    meta: renderYearMonthRangeToHtml({ year: 2020, month: 8 }, { year: 2022, month: 10 }),
    description: 'WordPressテーマ構築のための開発環境。',
  },
  {
    title: 'accrefs',
    link: 'https://accrefs.jp/',
    meta: renderYearMonthRangeToHtml({ year: 2019, month: 9 }),
    description:
      'ウェブアクセシビリティの参考資料をまとめたサイト。日本語の資料を中心にリンク数は200を超える。サイトのデザインおよび実装に携わる。有志のメンバーにより制作・運営されている。',
  },
  {
    title: 'shifted',
    link: 'https://github.com/yuheiy/shifted',
    meta: renderYearMonthRangeToHtml({ year: 2019, month: 5 }, { year: 2023, month: 7 }),
    description: '静的サイト構築のための開発環境。',
  },
  {
    title: 'シフトブレイン／スタンダードデザインユニット',
    link: 'https://standard.shiftbrain.com/',
    meta: renderYearMonthRangeToHtml({ year: 2018, month: 10 }, { year: 2020, month: 6 }),
    description: '自社で所属していたチームのウェブサイト。',
  },
  {
    title: 'yuhei blog',
    link: 'https://yuheiy.hatenablog.com/',
    meta: renderYearMonthRangeToHtml({ year: 2015, month: 10 }, { year: 2020, month: 11 }),
    description: '過去に更新していた個人ブログ。',
  },
] satisfies DetailsListItem[];

const latestBlogItems = await Promise.all(
  (await getCollection('blog'))
    .toSorted((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
    .slice(0, 3)
    .map(async (entry) => ({
      title: entry.data.title,
      link: `/${entry.slug}`,
      meta: renderDateToHtml(entry.data.pubDate),
      description: await getBlogDescription(entry),
    })),
);

const everylayoutEntry = await getEntry('blog', '20211011-publication-of-everylayout');
---

<Layout isHome description={siteDescription}>
  <PageHeader isHome title="安田 祐平">
    <div class="space-y-4 text-dynamic-muted [&_a:any-link]:text-dynamic">
      <p>{siteDescription}</p>
      <p>
        監訳を担当した書籍『<a href={`/${everylayoutEntry.slug}`}
          >Every Layout&mdash;&mdash;モジュラーなレスポンシブデザインを実現するCSS設計論</a
        >』が<a href="https://www.hanmoto.com/bd/isbn/9784862465177">オンライン書店などで発売中</a
        >。
      </p>
    </div>
  </PageHeader>

  <main>
    <section class="wrapper">
      <h2
        class="mb-12 text-lg font-bold leading-tight text-dynamic-muted [hanging-punctuation:none]"
      >
        主な投稿
      </h2>

      <DetailsList headingLevel={3} items={primaryItems} />
    </section>

    <div class="my-16 border-t"></div>

    <section class="wrapper">
      <h2
        class="mb-12 text-lg font-bold leading-tight text-dynamic-muted [hanging-punctuation:none]"
      >
        プロジェクト
      </h2>

      <DetailsList headingLevel={3} items={projectItems} />
    </section>

    <div class="my-16 border-t"></div>

    <section class="wrapper">
      <h2
        class="mb-12 text-lg font-bold leading-tight text-dynamic-muted [hanging-punctuation:none]"
      >
        最近のブログ
      </h2>

      <DetailsList headingLevel={3} items={latestBlogItems} clampDescription />
    </section>
  </main>
</Layout>
